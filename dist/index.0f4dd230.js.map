{"mappings":"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","sources":["<anon>","script.js"],"sourcesContent":["'use strict';\nclass Workout {\n    date = new Date();\n    id = (Date.now() + '').slice(-10);\n    clicks = 0;\n    constructor(coords, distance, duration){\n        this.coords = coords; // Store coordinates as [latitude, longitude]\n        this.distance = distance; // Distance of the workout in kilometers\n        this.duration = duration; // Duration of the workout in minutes\n    }\n    _setDescription() {\n        // Define the months of the year for generating descriptions\n        const months = [\n            'January',\n            'February',\n            'March',\n            'April',\n            'May',\n            'June',\n            'July',\n            'August',\n            'September',\n            'October',\n            'November',\n            'December'\n        ];\n        // Create a description in the format \"Type on Month Day\"\n        this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${months[this.date.getMonth()]} ${this.date.getDate()}`;\n    }\n    click() {\n        this.clicks++; // Increment the click counter\n    }\n}\nclass Running extends Workout {\n    type = 'running';\n    constructor(coords, distance, duration, cadence){\n        super(coords, distance, duration); // Call the parent constructor\n        this.cadence = cadence; // Store the running cadence (steps per minute)\n        this.calcPace(); // Calculate the running pace\n        this._setDescription(); // Set the workout description\n    }\n    calcPace() {\n        this.pace = this.duration / this.distance; // Calculate pace in minutes per kilometer\n        return this.pace; // Return the calculated pace\n    }\n}\nclass Cycling extends Workout {\n    type = 'cycling';\n    constructor(coords, distance, duration, elevationGain){\n        super(coords, distance, duration); // Call the parent constructor\n        this.elevationGain = elevationGain; // Store the elevation gain in meters\n        this.calcSpeed(); // Calculate the cycling speed\n        this._setDescription(); // Set the workout description\n    }\n    calcSpeed() {\n        this.speed = this.distance / (this.duration / 60); // Calculate speed in kilometers per hour\n        return this.speed; // Return the calculated speed\n    }\n}\n// APPLICATION ARCHITECTURE\nconst form = document.querySelector('.form'); // Select the form element\nconst containerWorkouts = document.querySelector('.workouts'); // Select the workout container\nconst inputType = document.querySelector('.form__input--type'); // Select the input for workout type\nconst inputDistance = document.querySelector('.form__input--distance'); // Select the input for distance\nconst inputDuration = document.querySelector('.form__input--duration'); // Select the input for duration\nconst inputCadence = document.querySelector('.form__input--cadence'); // Select the input for cadence\nconst inputElevation = document.querySelector('.form__input--elevation'); // Select the input for elevation\nclass App {\n    #map;\n    #mapZoomLevel = 13;\n    #mapEvent;\n    #workouts = [];\n    constructor(){\n        this._getPosition(); // Get the user's position\n        this._getLocalStorage(); // Load workouts from local storage\n        // Attach event handlers to the form and workout container\n        form.addEventListener('submit', this._newWorkout.bind(this)); // Handle form submission\n        inputType.addEventListener('change', this._toggleElevationField); // Toggle elevation/cadence fields\n        containerWorkouts.addEventListener('click', this._moveToPopup.bind(this)); // Handle clicks to focus on a workout\n        containerWorkouts.addEventListener('click', this._handleWorkoutActions.bind(this) // Handle Edit and Delete actions\n        );\n    }\n    _getPosition() {\n        // Check if geolocation is supported\n        if (navigator.geolocation) // Get the user's position\n        navigator.geolocation.getCurrentPosition(this._loadMap.bind(this), function() {\n            alert('Could not get your position'); // Alert the user if geolocation fails\n        });\n    }\n    _loadMap(position) {\n        const { latitude } = position.coords; // Extract latitude from position\n        const { longitude } = position.coords; // Extract longitude from position\n        const coords = [\n            latitude,\n            longitude\n        ]; // Combine latitude and longitude into an array\n        // Initialize the map with the user's position and zoom level\n        this.#map = L.map('map').setView(coords, this.#mapZoomLevel);\n        // Add tile layer to the map\n        L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {\n            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        }).addTo(this.#map);\n        // Add an event listener for map clicks to show the workout form\n        this.#map.on('click', this._showForm.bind(this));\n        // Render workout markers on the map for all stored workouts\n        this.#workouts.forEach((work)=>{\n            this._renderWorkoutMarker(work);\n        });\n    }\n    _showForm(mapE) {\n        this.#mapEvent = mapE; // Store the map event\n        form.classList.remove('hidden'); // Show the form\n        inputDistance.focus(); // Focus the distance input field\n    }\n    _hideForm() {\n        // Clear all input fields in the form\n        inputDistance.value = inputDuration.value = inputCadence.value = inputElevation.value = '';\n        form.style.display = 'none'; // Temporarily hide the form\n        form.classList.add('hidden'); // Add the 'hidden' class to the form\n        setTimeout(()=>form.style.display = 'grid', 1000); // Restore the grid layout after hiding\n    }\n    _toggleElevationField() {\n        // Toggle the visibility of elevation and cadence input fields\n        inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\n        inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\n    }\n    _handleWorkoutActions(e) {\n        const target = e.target; // Get the clicked element\n        if (target.classList.contains('btn--delete')) {\n            // Check if the clicked button is for deletion\n            const id = target.dataset.id; // Get the ID of the workout to delete\n            this._deleteWorkout(id); // Call the delete method\n        }\n        if (target.classList.contains('btn--edit')) {\n            // Check if the clicked button is for editing\n            const id = target.dataset.id; // Get the ID of the workout to edit\n            this._editWorkout(id); // Call the edit method\n        }\n    }\n    _newWorkout(e) {\n        const validInputs = (...inputs)=>inputs.every((inp)=>Number.isFinite(inp)); // Check if all inputs are finite numbers\n        const allPositive = (...inputs)=>inputs.every((inp)=>inp > 0); // Check if all inputs are positive\n        e.preventDefault(); // Prevent the default form submission behavior\n        // Get data from the form\n        const type = inputType.value; // Get the workout type (running or cycling)\n        const distance = +inputDistance.value; // Get the distance as a number\n        const duration = +inputDuration.value; // Get the duration as a number\n        const { lat, lng } = this.#mapEvent.latlng; // Extract latitude and longitude from the map event\n        let workout; // Variable to hold the workout object\n        // If the workout is running, create a Running object\n        if (type === 'running') {\n            const cadence = +inputCadence.value; // Get the cadence as a number\n            // Validate inputs and check positivity\n            if (!validInputs(distance, duration, cadence) || !allPositive(distance, duration, cadence)) return alert('Inputs have to be positive numbers!'); // Show an alert if validation fails\n            workout = new Running([\n                lat,\n                lng\n            ], distance, duration, cadence); // Create a new Running object\n        }\n        // If the workout is cycling, create a Cycling object\n        if (type === 'cycling') {\n            const elevation = +inputElevation.value; // Get the elevation as a number\n            // Validate inputs and check positivity\n            if (!validInputs(distance, duration, elevation) || !allPositive(distance, duration)) return alert('Inputs have to be positive numbers!'); // Show an alert if validation fails\n            workout = new Cycling([\n                lat,\n                lng\n            ], distance, duration, elevation); // Create a new Cycling object\n        }\n        // Add the new workout to the workouts array\n        this.#workouts.push(workout);\n        // Render the workout on the map as a marker\n        this._renderWorkoutMarker(workout);\n        // Render the workout in the sidebar list\n        this._renderWorkout(workout);\n        // Hide the form and clear input fields\n        this._hideForm();\n        // Save all workouts to local storage\n        this._setLocalStorage();\n    }\n    _editWorkout(id) {\n        // Find the workout to be edited by ID\n        const workout = this.#workouts.find((workout)=>workout.id === id);\n        // Pre-fill the form with existing workout details\n        inputType.value = workout.type; // Set the workout type\n        inputDistance.value = workout.distance; // Set the distance\n        inputDuration.value = workout.duration; // Set the duration\n        if (workout.type === 'running') {\n            inputCadence.value = workout.cadence; // Set the cadence\n            inputElevation.closest('.form__row').classList.add('form__row--hidden'); // Hide the elevation field\n            inputCadence.closest('.form__row').classList.remove('form__row--hidden'); // Show the cadence field\n        }\n        if (workout.type === 'cycling') {\n            inputElevation.value = workout.elevationGain; // Set the elevation gain\n            inputCadence.closest('.form__row').classList.add('form__row--hidden'); // Hide the cadence field\n            inputElevation.closest('.form__row').classList.remove('form__row--hidden'); // Show the elevation field\n        }\n        // Show the form for editing\n        form.classList.remove('hidden');\n        inputDistance.focus(); // Focus on the first input field\n        // Remove the workout temporarily from the array\n        this.#workouts = this.#workouts.filter((work)=>work.id !== id);\n        // Attach a one-time event listener to save the edited workout\n        form.addEventListener('submit', (function saveEdit(e) {\n            e.preventDefault(); // Prevent default form submission\n            // Get updated data from the form\n            const type = inputType.value; // Get the updated workout type\n            const distance = +inputDistance.value; // Get the updated distance\n            const duration = +inputDuration.value; // Get the updated duration\n            let updatedWorkout; // Variable for the updated workout\n            // Handle the updated workout based on type\n            if (type === 'running') {\n                const cadence = +inputCadence.value; // Get the updated cadence\n                // Validate inputs\n                if (!distance || !duration || !cadence) return alert('Please provide valid inputs!'); // Show alert if validation fails\n                // Create a new Running object with updated data\n                updatedWorkout = new Running(workout.coords, distance, duration, cadence);\n            }\n            if (type === 'cycling') {\n                const elevation = +inputElevation.value; // Get the updated elevation\n                // Validate inputs\n                if (!distance || !duration || !elevation) return alert('Please provide valid inputs!'); // Show alert if validation fails\n                // Create a new Cycling object with updated data\n                updatedWorkout = new Cycling(workout.coords, distance, duration, elevation);\n            }\n            // Add the updated workout back to the array\n            this.#workouts.push(updatedWorkout);\n            // Save all workouts to local storage and refresh the UI\n            this._setLocalStorage();\n            location.reload(); // Reload the page to reflect changes\n            // Remove the event listener to prevent multiple triggers\n            form.removeEventListener('submit', saveEdit);\n        }).bind(this) // Bind 'this' to retain the class context\n        );\n    }\n    _deleteWorkout(id) {\n        // Find the index of the workout to be deleted\n        const index = this.#workouts.findIndex((workout)=>workout.id === id);\n        // Remove the workout from the workouts array\n        this.#workouts.splice(index, 1);\n        // Update the local storage and UI\n        this._setLocalStorage();\n        location.reload(); // Reload the page to update the list\n    }\n    _renderWorkoutMarker(workout) {\n        // Create a marker on the map for the workout\n        L.marker(workout.coords).addTo(this.#map) // Add the marker to the map\n        .bindPopup(// Bind a popup to the marker\n        L.popup({\n            maxWidth: 250,\n            minWidth: 100,\n            autoClose: false,\n            closeOnClick: false,\n            className: `${workout.type}-popup`\n        })).setPopupContent(// Set the content of the popup\n        `${workout.type === 'running' ? \"\\uD83C\\uDFC3\\u200D\\u2642\\uFE0F\" : \"\\uD83D\\uDEB4\\u200D\\u2640\\uFE0F\"} ${workout.description}`).openPopup(); // Open the popup automatically\n    }\n    _renderWorkout(workout) {\n        let html = `\n      <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n        <h2 class=\"workout__title\">${workout.description}</h2>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">${workout.type === 'running' ? \"\\uD83C\\uDFC3\\u200D\\u2642\\uFE0F\" : \"\\uD83D\\uDEB4\\u200D\\u2640\\uFE0F\"}</span>\n          <span class=\"workout__value\">${workout.distance}</span>\n          <span class=\"workout__unit\">km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">\\u{23F1}</span>\n          <span class=\"workout__value\">${workout.duration}</span>\n          <span class=\"workout__unit\">min</span>\n        </div>\n    `;\n        if (workout.type === 'running') html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">\\u{26A1}\\u{FE0F}</span>\n          <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n          <span class=\"workout__unit\">min/km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">\\u{1F9B6}\\u{1F3FC}</span>\n          <span class=\"workout__value\">${workout.cadence}</span>\n          <span class=\"workout__unit\">spm</span>\n        </div>\n      </li>\n      `;\n        if (workout.type === 'cycling') html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">\\u{26A1}\\u{FE0F}</span>\n          <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n          <span class=\"workout__unit\">km/h</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">\\u{26F0}</span>\n          <span class=\"workout__value\">${workout.elevationGain}</span>\n          <span class=\"workout__unit\">m</span>\n        </div>\n      </li>\n      `;\n        html += `\n      <div class=\"workout__actions\">\n        <button class=\"btn btn--edit\" data-id=\"${workout.id}\">Edit</button>\n        <button class=\"btn btn--delete\" data-id=\"${workout.id}\">Delete</button>\n      </div>\n    </li>\n    `;\n        form.insertAdjacentHTML('afterend', html); // Insert the workout HTML after the form\n    }\n    _moveToPopup(e) {\n        if (!this.#map) return; // Exit if the map is not initialized\n        const workoutEl = e.target.closest('.workout'); // Find the closest workout element clicked\n        if (!workoutEl) return; // Exit if no workout element was found\n        const workout = this.#workouts.find((work)=>work.id === workoutEl.dataset.id // Find the workout with the matching ID\n        );\n        this.#map.setView(workout.coords, 15, {\n            animate: true,\n            pan: {\n                duration: 2\n            }\n        });\n    }\n    _setLocalStorage() {\n        // Save the current workouts array to local storage\n        localStorage.setItem('workouts', JSON.stringify(this.#workouts));\n    }\n    _getLocalStorage() {\n        const data = JSON.parse(localStorage.getItem('workouts')); // Retrieve workouts data from local storage\n        if (!data) return; // Exit if no data was found in local storage\n        this.#workouts = data; // Restore the workouts array with the retrieved data\n        this.#workouts.forEach((work)=>{\n            this._renderWorkout(work); // Render each workout in the sidebar\n        });\n    }\n    reset() {\n        localStorage.removeItem('workouts'); // Remove workouts data from local storage\n        location.reload(); // Reload the page to reset the application state\n    }\n}\nconst app = new App(); // Create an instance of the App class to start the application\n\n//# sourceMappingURL=index.0f4dd230.js.map\n","'use strict';\n\nclass Workout {\n  date = new Date(); // Set the workout date to the current date\n  id = (Date.now() + '').slice(-10); // Generate a unique ID using the current timestamp\n  clicks = 0; // Initialize the number of clicks\n\n  constructor(coords, distance, duration) {\n    this.coords = coords; // Store coordinates as [latitude, longitude]\n    this.distance = distance; // Distance of the workout in kilometers\n    this.duration = duration; // Duration of the workout in minutes\n  }\n\n  _setDescription() {\n    // Define the months of the year for generating descriptions\n    const months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December',\n    ];\n\n    // Create a description in the format \"Type on Month Day\"\n    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${\n      months[this.date.getMonth()]\n    } ${this.date.getDate()}`;\n  }\n\n  click() {\n    this.clicks++; // Increment the click counter\n  }\n}\n\nclass Running extends Workout {\n  type = 'running'; // Define the workout type as 'running'\n\n  constructor(coords, distance, duration, cadence) {\n    super(coords, distance, duration); // Call the parent constructor\n    this.cadence = cadence; // Store the running cadence (steps per minute)\n    this.calcPace(); // Calculate the running pace\n    this._setDescription(); // Set the workout description\n  }\n\n  calcPace() {\n    this.pace = this.duration / this.distance; // Calculate pace in minutes per kilometer\n    return this.pace; // Return the calculated pace\n  }\n}\n\nclass Cycling extends Workout {\n  type = 'cycling'; // Define the workout type as 'cycling'\n\n  constructor(coords, distance, duration, elevationGain) {\n    super(coords, distance, duration); // Call the parent constructor\n    this.elevationGain = elevationGain; // Store the elevation gain in meters\n    this.calcSpeed(); // Calculate the cycling speed\n    this._setDescription(); // Set the workout description\n  }\n\n  calcSpeed() {\n    this.speed = this.distance / (this.duration / 60); // Calculate speed in kilometers per hour\n    return this.speed; // Return the calculated speed\n  }\n}\n\n// APPLICATION ARCHITECTURE\nconst form = document.querySelector('.form'); // Select the form element\nconst containerWorkouts = document.querySelector('.workouts'); // Select the workout container\nconst inputType = document.querySelector('.form__input--type'); // Select the input for workout type\nconst inputDistance = document.querySelector('.form__input--distance'); // Select the input for distance\nconst inputDuration = document.querySelector('.form__input--duration'); // Select the input for duration\nconst inputCadence = document.querySelector('.form__input--cadence'); // Select the input for cadence\nconst inputElevation = document.querySelector('.form__input--elevation'); // Select the input for elevation\n\nclass App {\n  #map; // Private property for the map instance\n  #mapZoomLevel = 13; // Default zoom level for the map\n  #mapEvent; // Store the map event data\n  #workouts = []; // Array to store all workouts\n\n  constructor() {\n    this._getPosition(); // Get the user's position\n\n    this._getLocalStorage(); // Load workouts from local storage\n\n    // Attach event handlers to the form and workout container\n    form.addEventListener('submit', this._newWorkout.bind(this)); // Handle form submission\n    inputType.addEventListener('change', this._toggleElevationField); // Toggle elevation/cadence fields\n    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this)); // Handle clicks to focus on a workout\n    containerWorkouts.addEventListener(\n      'click',\n      this._handleWorkoutActions.bind(this) // Handle Edit and Delete actions\n    );\n  }\n\n  _getPosition() {\n    // Check if geolocation is supported\n    if (navigator.geolocation)\n      // Get the user's position\n      navigator.geolocation.getCurrentPosition(\n        this._loadMap.bind(this), // Load the map with the user's position\n        function () {\n          alert('Could not get your position'); // Alert the user if geolocation fails\n        }\n      );\n  }\n\n  _loadMap(position) {\n    const { latitude } = position.coords; // Extract latitude from position\n    const { longitude } = position.coords; // Extract longitude from position\n\n    const coords = [latitude, longitude]; // Combine latitude and longitude into an array\n\n    // Initialize the map with the user's position and zoom level\n    this.#map = L.map('map').setView(coords, this.#mapZoomLevel);\n\n    // Add tile layer to the map\n    L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {\n      attribution:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    }).addTo(this.#map);\n\n    // Add an event listener for map clicks to show the workout form\n    this.#map.on('click', this._showForm.bind(this));\n\n    // Render workout markers on the map for all stored workouts\n    this.#workouts.forEach(work => {\n      this._renderWorkoutMarker(work);\n    });\n  }\n\n  _showForm(mapE) {\n    this.#mapEvent = mapE; // Store the map event\n    form.classList.remove('hidden'); // Show the form\n    inputDistance.focus(); // Focus the distance input field\n  }\n\n  _hideForm() {\n    // Clear all input fields in the form\n    inputDistance.value =\n      inputDuration.value =\n      inputCadence.value =\n      inputElevation.value =\n        '';\n\n    form.style.display = 'none'; // Temporarily hide the form\n    form.classList.add('hidden'); // Add the 'hidden' class to the form\n    setTimeout(() => (form.style.display = 'grid'), 1000); // Restore the grid layout after hiding\n  }\n\n  _toggleElevationField() {\n    // Toggle the visibility of elevation and cadence input fields\n    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\n    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\n  }\n\n  _handleWorkoutActions(e) {\n    const target = e.target; // Get the clicked element\n\n    if (target.classList.contains('btn--delete')) {\n      // Check if the clicked button is for deletion\n      const id = target.dataset.id; // Get the ID of the workout to delete\n      this._deleteWorkout(id); // Call the delete method\n    }\n\n    if (target.classList.contains('btn--edit')) {\n      // Check if the clicked button is for editing\n      const id = target.dataset.id; // Get the ID of the workout to edit\n      this._editWorkout(id); // Call the edit method\n    }\n  }\n\n  _newWorkout(e) {\n    const validInputs = (...inputs) =>\n      inputs.every(inp => Number.isFinite(inp)); // Check if all inputs are finite numbers\n    const allPositive = (...inputs) => inputs.every(inp => inp > 0); // Check if all inputs are positive\n\n    e.preventDefault(); // Prevent the default form submission behavior\n\n    // Get data from the form\n    const type = inputType.value; // Get the workout type (running or cycling)\n    const distance = +inputDistance.value; // Get the distance as a number\n    const duration = +inputDuration.value; // Get the duration as a number\n    const { lat, lng } = this.#mapEvent.latlng; // Extract latitude and longitude from the map event\n    let workout; // Variable to hold the workout object\n\n    // If the workout is running, create a Running object\n    if (type === 'running') {\n      const cadence = +inputCadence.value; // Get the cadence as a number\n\n      // Validate inputs and check positivity\n      if (\n        !validInputs(distance, duration, cadence) ||\n        !allPositive(distance, duration, cadence)\n      )\n        return alert('Inputs have to be positive numbers!'); // Show an alert if validation fails\n\n      workout = new Running([lat, lng], distance, duration, cadence); // Create a new Running object\n    }\n\n    // If the workout is cycling, create a Cycling object\n    if (type === 'cycling') {\n      const elevation = +inputElevation.value; // Get the elevation as a number\n\n      // Validate inputs and check positivity\n      if (\n        !validInputs(distance, duration, elevation) ||\n        !allPositive(distance, duration)\n      )\n        return alert('Inputs have to be positive numbers!'); // Show an alert if validation fails\n\n      workout = new Cycling([lat, lng], distance, duration, elevation); // Create a new Cycling object\n    }\n\n    // Add the new workout to the workouts array\n    this.#workouts.push(workout);\n\n    // Render the workout on the map as a marker\n    this._renderWorkoutMarker(workout);\n\n    // Render the workout in the sidebar list\n    this._renderWorkout(workout);\n\n    // Hide the form and clear input fields\n    this._hideForm();\n\n    // Save all workouts to local storage\n    this._setLocalStorage();\n  }\n\n  _editWorkout(id) {\n    // Find the workout to be edited by ID\n    const workout = this.#workouts.find(workout => workout.id === id);\n\n    // Pre-fill the form with existing workout details\n    inputType.value = workout.type; // Set the workout type\n    inputDistance.value = workout.distance; // Set the distance\n    inputDuration.value = workout.duration; // Set the duration\n\n    if (workout.type === 'running') {\n      inputCadence.value = workout.cadence; // Set the cadence\n      inputElevation.closest('.form__row').classList.add('form__row--hidden'); // Hide the elevation field\n      inputCadence.closest('.form__row').classList.remove('form__row--hidden'); // Show the cadence field\n    }\n\n    if (workout.type === 'cycling') {\n      inputElevation.value = workout.elevationGain; // Set the elevation gain\n      inputCadence.closest('.form__row').classList.add('form__row--hidden'); // Hide the cadence field\n      inputElevation\n        .closest('.form__row')\n        .classList.remove('form__row--hidden'); // Show the elevation field\n    }\n\n    // Show the form for editing\n    form.classList.remove('hidden');\n    inputDistance.focus(); // Focus on the first input field\n\n    // Remove the workout temporarily from the array\n    this.#workouts = this.#workouts.filter(work => work.id !== id);\n\n    // Attach a one-time event listener to save the edited workout\n    form.addEventListener(\n      'submit',\n      function saveEdit(e) {\n        e.preventDefault(); // Prevent default form submission\n\n        // Get updated data from the form\n        const type = inputType.value; // Get the updated workout type\n        const distance = +inputDistance.value; // Get the updated distance\n        const duration = +inputDuration.value; // Get the updated duration\n        let updatedWorkout; // Variable for the updated workout\n\n        // Handle the updated workout based on type\n        if (type === 'running') {\n          const cadence = +inputCadence.value; // Get the updated cadence\n\n          // Validate inputs\n          if (!distance || !duration || !cadence)\n            return alert('Please provide valid inputs!'); // Show alert if validation fails\n\n          // Create a new Running object with updated data\n          updatedWorkout = new Running(\n            workout.coords,\n            distance,\n            duration,\n            cadence\n          );\n        }\n\n        if (type === 'cycling') {\n          const elevation = +inputElevation.value; // Get the updated elevation\n\n          // Validate inputs\n          if (!distance || !duration || !elevation)\n            return alert('Please provide valid inputs!'); // Show alert if validation fails\n\n          // Create a new Cycling object with updated data\n          updatedWorkout = new Cycling(\n            workout.coords,\n            distance,\n            duration,\n            elevation\n          );\n        }\n\n        // Add the updated workout back to the array\n        this.#workouts.push(updatedWorkout);\n\n        // Save all workouts to local storage and refresh the UI\n        this._setLocalStorage();\n        location.reload(); // Reload the page to reflect changes\n\n        // Remove the event listener to prevent multiple triggers\n        form.removeEventListener('submit', saveEdit);\n      }.bind(this) // Bind 'this' to retain the class context\n    );\n  }\n\n  _deleteWorkout(id) {\n    // Find the index of the workout to be deleted\n    const index = this.#workouts.findIndex(workout => workout.id === id);\n\n    // Remove the workout from the workouts array\n    this.#workouts.splice(index, 1);\n\n    // Update the local storage and UI\n    this._setLocalStorage();\n    location.reload(); // Reload the page to update the list\n  }\n\n  _renderWorkoutMarker(workout) {\n    // Create a marker on the map for the workout\n    L.marker(workout.coords)\n      .addTo(this.#map) // Add the marker to the map\n      .bindPopup(\n        // Bind a popup to the marker\n        L.popup({\n          maxWidth: 250, // Set maximum width of the popup\n          minWidth: 100, // Set minimum width of the popup\n          autoClose: false, // Prevent automatic closing\n          closeOnClick: false, // Prevent closing on click\n          className: `${workout.type}-popup`, // Use a class based on workout type\n        })\n      )\n      .setPopupContent(\n        // Set the content of the popup\n        `${workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'} ${workout.description}`\n      )\n      .openPopup(); // Open the popup automatically\n  }\n\n  _renderWorkout(workout) {\n    let html = `\n      <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n        <h2 class=\"workout__title\">${workout.description}</h2>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">${\n            workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'\n          }</span>\n          <span class=\"workout__value\">${workout.distance}</span>\n          <span class=\"workout__unit\">km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⏱</span>\n          <span class=\"workout__value\">${workout.duration}</span>\n          <span class=\"workout__unit\">min</span>\n        </div>\n    `;\n\n    if (workout.type === 'running')\n      html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⚡️</span>\n          <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n          <span class=\"workout__unit\">min/km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">🦶🏼</span>\n          <span class=\"workout__value\">${workout.cadence}</span>\n          <span class=\"workout__unit\">spm</span>\n        </div>\n      </li>\n      `;\n\n    if (workout.type === 'cycling')\n      html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⚡️</span>\n          <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n          <span class=\"workout__unit\">km/h</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⛰</span>\n          <span class=\"workout__value\">${workout.elevationGain}</span>\n          <span class=\"workout__unit\">m</span>\n        </div>\n      </li>\n      `;\n\n    html += `\n      <div class=\"workout__actions\">\n        <button class=\"btn btn--edit\" data-id=\"${workout.id}\">Edit</button>\n        <button class=\"btn btn--delete\" data-id=\"${workout.id}\">Delete</button>\n      </div>\n    </li>\n    `;\n\n    form.insertAdjacentHTML('afterend', html); // Insert the workout HTML after the form\n  }\n\n  _moveToPopup(e) {\n    if (!this.#map) return; // Exit if the map is not initialized\n\n    const workoutEl = e.target.closest('.workout'); // Find the closest workout element clicked\n\n    if (!workoutEl) return; // Exit if no workout element was found\n\n    const workout = this.#workouts.find(\n      work => work.id === workoutEl.dataset.id // Find the workout with the matching ID\n    );\n\n    this.#map.setView(workout.coords, 15, {\n      animate: true, // Enable animation for the map movement\n      pan: {\n        duration: 2, // Set the duration of the animation to 2 seconds\n      },\n    });\n  }\n\n  _setLocalStorage() {\n    // Save the current workouts array to local storage\n    localStorage.setItem('workouts', JSON.stringify(this.#workouts));\n  }\n\n  _getLocalStorage() {\n    const data = JSON.parse(localStorage.getItem('workouts')); // Retrieve workouts data from local storage\n\n    if (!data) return; // Exit if no data was found in local storage\n\n    this.#workouts = data; // Restore the workouts array with the retrieved data\n\n    this.#workouts.forEach(work => {\n      this._renderWorkout(work); // Render each workout in the sidebar\n    });\n  }\n\n  reset() {\n    localStorage.removeItem('workouts'); // Remove workouts data from local storage\n    location.reload(); // Reload the page to reset the application state\n  }\n}\nconst app = new App(); // Create an instance of the App class to start the application\n"],"names":["Workout","date","Date","id","now","slice","clicks","constructor","coords","distance","duration","_setDescription","description","type","toUpperCase","months","getMonth","getDate","click","Running","cadence","calcPace","pace","Cycling","elevationGain","calcSpeed","speed","form","document","querySelector","containerWorkouts","inputType","inputDistance","inputDuration","inputCadence","inputElevation","_getPosition","_getLocalStorage","addEventListener","_newWorkout","bind","_toggleElevationField","_moveToPopup","_handleWorkoutActions","navigator","geolocation","getCurrentPosition","_loadMap","alert","position","latitude","longitude","L","map","setView","tileLayer","attribution","addTo","on","_showForm","forEach","work","_renderWorkoutMarker","mapE","classList","remove","focus","_hideForm","value","style","display","add","setTimeout","closest","toggle","e","target","contains","dataset","_deleteWorkout","_editWorkout","workout","validInputs","inputs","every","inp","Number","isFinite","allPositive","preventDefault","lat","lng","latlng","elevation","push","_renderWorkout","_setLocalStorage","find","filter","saveEdit","updatedWorkout","location","reload","removeEventListener","index","findIndex","splice","marker","bindPopup","popup","maxWidth","minWidth","autoClose","closeOnClick","className","setPopupContent","openPopup","html","toFixed","insertAdjacentHTML","workoutEl","animate","pan","localStorage","setItem","JSON","stringify","data","parse","getItem","reset","removeItem"],"version":3,"file":"index.0f4dd230.js.map"}